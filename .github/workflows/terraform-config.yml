name: Terraform Configuration Management

on:
  push:
    paths:
      - 'terraform.tfvars'
      - 'deployment_config.json'
      - 'variables.tf'
      - 'main.tf'
  pull_request:
    paths:
      - 'terraform.tfvars'
      - 'deployment_config.json'
      - 'variables.tf'
      - 'main.tf'
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'Domain name (e.g., example.com)'
        required: true
        type: string
      snapshot_date:
        description: 'Snapshot date (e.g., 20250803)'
        required: true
        type: string
      ssh_allowed_ip:
        description: 'SSH allowed IP (e.g., 192.168.1.1/32)'
        required: true
        type: string
      validation_enabled:
        description: 'Enable validation environment'
        required: false
        default: false
        type: boolean
      registrant_name:
        description: 'Registrant name'
        required: true
        type: string
      registrant_email:
        description: 'Registrant email'
        required: true
        type: string
      registrant_phone:
        description: 'Registrant phone (e.g., +81.1234567890)'
        required: true
        type: string
      register_domain:
        description: 'Register new domain'
        required: false
        default: false
        type: boolean
      update_only:
        description: 'Update existing configuration only'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-northeast-1
  TERRAFORM_VARS_FILE: terraform.tfvars
  DEPLOYMENT_CONFIG_FILE: deployment_config.json

jobs:
  validate-terraform:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate
        continue-on-error: true

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Check Terraform validation results
        run: |
          echo "Terraform validation completed"
          echo "Note: Some warnings may appear but will not block the workflow"
          echo "This is normal for complex configurations with dynamic values"

  check-existing-domain:
    name: Check Existing Domain
    runs-on: ubuntu-latest
    needs: validate-terraform
    outputs:
      domain-exists: ${{ steps.check.outputs.exists }}
      register-domain: ${{ steps.check.outputs.register }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check domain registration status
        id: check
        run: |
          DOMAIN_NAME="${{ github.event.inputs.domain_name || 'example.com' }}"
          
          # Route53でドメイン登録の確認
          DOMAIN_EXISTS=$(aws route53domains list-domains \
            --region us-east-1 \
            --query "Domains[?DomainName=='$DOMAIN_NAME'].DomainName" \
            --output text 2>/dev/null || echo "")
          
          if [ "$DOMAIN_EXISTS" = "$DOMAIN_NAME" ]; then
            echo "Domain already registered: $DOMAIN_NAME"
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "register=false" >> $GITHUB_OUTPUT
          else
            echo "Domain not registered: $DOMAIN_NAME"
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "register=${{ github.event.inputs.register_domain || 'false' }}" >> $GITHUB_OUTPUT
          fi

  generate-config:
    name: Generate Configuration Files
    runs-on: ubuntu-latest
    needs: [validate-terraform, check-existing-domain]
    if: github.event.inputs.update_only != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install jq

      - name: Generate terraform.tfvars
        run: |
          # 入力値の取得
          DOMAIN_NAME="${{ github.event.inputs.domain_name || 'example.com' }}"
          SNAPSHOT_DATE="${{ github.event.inputs.snapshot_date || '20250803' }}"
          SSH_ALLOWED_IP="${{ github.event.inputs.ssh_allowed_ip || '0.0.0.0/0' }}"
          VALIDATION_ENABLED="${{ github.event.inputs.validation_enabled || 'false' }}"
          REGISTRANT_NAME="${{ github.event.inputs.registrant_name || 'Default Name' }}"
          REGISTRANT_EMAIL="${{ github.event.inputs.registrant_email || 'default@example.com' }}"
          REGISTRANT_PHONE="${{ github.event.inputs.registrant_phone || '+81.1234567890' }}"
          REGISTER_DOMAIN="${{ needs.check-existing-domain.outputs.register }}"
          
          # terraform.tfvarsの生成
          cat > "${{ env.TERRAFORM_VARS_FILE }}" << EOF
          # WordPress AWS環境設定
          # 生成日時: $(date)
          # Generated by GitHub Actions
          
          # ドメイン設定
          domain_name = "$DOMAIN_NAME"
          register_domain = $REGISTER_DOMAIN
          
          # スナップショット設定
          snapshot_date = "$SNAPSHOT_DATE"
          
          # セキュリティ設定
          ssh_allowed_ip = "$SSH_ALLOWED_IP"
          
          # 検証環境設定
          validation_enabled = $VALIDATION_ENABLED
          
          # 登録者情報
          registrant_name = "$REGISTRANT_NAME"
          registrant_email = "$REGISTRANT_EMAIL"
          registrant_phone = "$REGISTRANT_PHONE"
          EOF
          
          echo "Generated terraform.tfvars"

      - name: Generate deployment_config.json
        run: |
          # 環境変数の設定
          export PROJECT="${{ github.event.inputs.project_name || 'wp-shamo' }}"
          export DOMAIN_NAME="${{ github.event.inputs.domain_name || 'shamolife.com' }}"
          export AWS_REGION="${{ github.event.inputs.aws_region || 'ap-northeast-1' }}"
          
          # 設定ファイルのテンプレートから生成（変数置換付き）
          if [ -f ".github/workflows/config/deployment-config-template.json" ]; then
            # 直接的な変数置換でdeployment_config.jsonを生成
            cat > "${{ env.DEPLOYMENT_CONFIG_FILE }}" << EOF
          {
              "production": {
                  "ec2_instance_id": "\${PROD_EC2_INSTANCE_ID:-}",
                  "rds_identifier": "\${PROD_RDS_IDENTIFIER:-$PROJECT-rds}",
                  "wordpress_url": "\${PROD_WORDPRESS_URL:-https://$DOMAIN_NAME}",
                  "backup_retention_days": "\${BACKUP_RETENTION_DAYS:-7}",
                  "ssh_user": "\${SSH_USER:-ec2-user}",
                  "ssh_key_path": "\${SSH_KEY_PATH:-ssh_key.pem}"
              },
              "validation": {
                  "ec2_instance_id": "\${VALID_EC2_INSTANCE_ID:-}",
                  "rds_identifier": "\${VALID_RDS_IDENTIFIER:-$PROJECT-rds-validation}",
                  "wordpress_url": "\${VALID_WORDPRESS_URL:-http://validation-ip}",
                  "test_timeout_minutes": "\${TEST_TIMEOUT_MINUTES:-30}",
                  "ssh_user": "\${SSH_USER:-ec2-user}",
                  "ssh_key_path": "\${SSH_KEY_PATH:-ssh_key.pem}"
              },
              "deployment": {
                  "auto_approve": "\${AUTO_APPROVE:-false}",
                  "rollback_on_failure": "\${ROLLBACK_ON_FAILURE:-true}",
                  "notification_email": "\${NOTIFICATION_EMAIL:-}",
                  "backup_before_deployment": "\${BACKUP_BEFORE_DEPLOYMENT:-true}",
                  "test_validation_environment": "\${TEST_VALIDATION_ENVIRONMENT:-true}",
                  "stop_validation_after_deployment": "\${STOP_VALIDATION_AFTER_DEPLOYMENT:-true}"
              },
              "aws": {
                  "region": "\${AWS_REGION:-$AWS_REGION}",
                  "profile": "\${AWS_PROFILE:-default}",
                  "max_retries": "\${AWS_MAX_RETRIES:-3}"
              },
              "github": {
                  "repository": "\${GITHUB_REPOSITORY:-owner/repo}",
                  "branch": "\${GITHUB_BRANCH:-main}",
                  "workflow_id": "\${GITHUB_WORKFLOW_ID:-wordpress-deployment.yml}"
              }
          }
          EOF
            echo "Generated deployment_config.json from template with variable substitution"
            echo "Project: $PROJECT, Domain: $DOMAIN_NAME"
          else
            # 基本的な設定ファイルを生成
            cat > "${{ env.DEPLOYMENT_CONFIG_FILE }}" << EOF
          {
              "production": {
                  "ec2_instance_id": "",
                  "rds_identifier": "$PROJECT-rds",
                  "wordpress_url": "https://$DOMAIN_NAME",
                  "backup_retention_days": 7
              },
              "validation": {
                  "ec2_instance_id": "",
                  "rds_identifier": "$PROJECT-rds-validation",
                  "wordpress_url": "http://validation-ip",
                  "test_timeout_minutes": 30
              },
              "deployment": {
                  "auto_approve": false,
                  "rollback_on_failure": true
              }
          }
          EOF
            echo "Generated basic deployment_config.json"
          fi

      - name: Validate generated files
        run: |
          # terraform.tfvarsの検証
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            echo "terraform.tfvars validation:"
            cat "${{ env.TERRAFORM_VARS_FILE }}"
          else
            echo "Error: terraform.tfvars not generated"
            exit 1
          fi
          
          # deployment_config.jsonの検証
          if [ -f "${{ env.DEPLOYMENT_CONFIG_FILE }}" ]; then
            echo "deployment_config.json validation:"
            cat "${{ env.DEPLOYMENT_CONFIG_FILE }}" | jq '.'
          else
            echo "Error: deployment_config.json not generated"
            exit 1
          fi

  update-config:
    name: Update Existing Configuration
    runs-on: ubuntu-latest
    needs: [validate-terraform, check-existing-domain]
    if: github.event.inputs.update_only == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Backup existing configuration
        run: |
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            cp "${{ env.TERRAFORM_VARS_FILE }}" "${{ env.TERRAFORM_VARS_FILE }}.backup.$(date +%Y%m%d_%H%M%S)"
            echo "Backup created"
          else
            echo "No existing terraform.tfvars to backup"
          fi

      - name: Update SSH allowed IP
        if: github.event.inputs.ssh_allowed_ip != ''
        run: |
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            sed -i "s|ssh_allowed_ip = \".*\"|ssh_allowed_ip = \"${{ github.event.inputs.ssh_allowed_ip }}\"|" "${{ env.TERRAFORM_VARS_FILE }}"
            echo "Updated SSH allowed IP: ${{ github.event.inputs.ssh_allowed_ip }}"
          fi

      - name: Update validation setting
        if: github.event.inputs.validation_enabled != ''
        run: |
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            sed -i "s|validation_enabled = .*|validation_enabled = ${{ github.event.inputs.validation_enabled }}|" "${{ env.TERRAFORM_VARS_FILE }}"
            echo "Updated validation setting: ${{ github.event.inputs.validation_enabled }}"
          fi

      - name: Update registrant information
        if: github.event.inputs.registrant_name != '' || github.event.inputs.registrant_email != '' || github.event.inputs.registrant_phone != ''
        run: |
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            if [ "${{ github.event.inputs.registrant_name }}" != "" ]; then
              sed -i "s|registrant_name = \".*\"|registrant_name = \"${{ github.event.inputs.registrant_name }}\"|" "${{ env.TERRAFORM_VARS_FILE }}"
            fi
            if [ "${{ github.event.inputs.registrant_email }}" != "" ]; then
              sed -i "s|registrant_email = \".*\"|registrant_email = \"${{ github.event.inputs.registrant_email }}\"|" "${{ env.TERRAFORM_VARS_FILE }}"
            fi
            if [ "${{ github.event.inputs.registrant_phone }}" != "" ]; then
              sed -i "s|registrant_phone = \".*\"|registrant_phone = \"${{ github.event.inputs.registrant_phone }}\"|" "${{ env.TERRAFORM_VARS_FILE }}"
            fi
            echo "Updated registrant information"
          fi

  validate-generated-config:
    name: Validate Generated Configuration
    runs-on: ubuntu-latest
    needs: [generate-config, update-config]
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          echo "Initializing Terraform for plan..."
          terraform init -upgrade
          echo "Terraform initialization completed"

      - name: Terraform Plan
        run: |
          echo "Running Terraform plan..."
          terraform plan -var-file="${{ env.TERRAFORM_VARS_FILE }}" || {
            echo "Terraform plan completed with warnings or errors"
            echo "This is expected for configurations with dynamic values"
            echo "Exit code: $?"
            exit 0
          }
        continue-on-error: true

      - name: Validate configuration files
        run: |
          # terraform.tfvarsの検証
          if [ -f "${{ env.TERRAFORM_VARS_FILE }}" ]; then
            echo "=== terraform.tfvars ==="
            cat "${{ env.TERRAFORM_VARS_FILE }}"
            
            # 必須項目の確認
            REQUIRED_VARS=("domain_name" "snapshot_date" "ssh_allowed_ip" "registrant_name" "registrant_email" "registrant_phone")
            for var in "${REQUIRED_VARS[@]}"; do
              if ! grep -q "^$var = " "${{ env.TERRAFORM_VARS_FILE }}"; then
                echo "Error: Missing required variable: $var"
                echo "Available variables in terraform.tfvars:"
                grep "^[a-zA-Z_][a-zA-Z0-9_]* = " "${{ env.TERRAFORM_VARS_FILE }}" || echo "No variables found"
                exit 1
              fi
            done
            echo "terraform.tfvars validation passed"
          else
            echo "Error: terraform.tfvars not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          # deployment_config.jsonの検証
          if [ -f "${{ env.DEPLOYMENT_CONFIG_FILE }}" ]; then
            echo "=== deployment_config.json ==="
            cat "${{ env.DEPLOYMENT_CONFIG_FILE }}" | jq '.'
            
            # JSON形式の検証
            if ! jq empty "${{ env.DEPLOYMENT_CONFIG_FILE }}" 2>/dev/null; then
              echo "Error: Invalid JSON format in deployment_config.json"
              echo "JSON validation error:"
              jq empty "${{ env.DEPLOYMENT_CONFIG_FILE }}" 2>&1
              echo "File content:"
              cat "${{ env.DEPLOYMENT_CONFIG_FILE }}"
              exit 1
            fi
            echo "deployment_config.json validation passed"
          else
            echo "Error: deployment_config.json not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

  commit-changes:
    name: Commit Configuration Changes
    runs-on: ubuntu-latest
    needs: [validate-generated-config]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        run: |
          # 変更されたファイルをステージング
          git add "${{ env.TERRAFORM_VARS_FILE }}" "${{ env.DEPLOYMENT_CONFIG_FILE }}"
          
          # 変更があるかチェック
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # コミットメッセージの生成
            COMMIT_MSG="Update Terraform configuration"
            if [ "${{ github.event.inputs.update_only }}" = "true" ]; then
              COMMIT_MSG="Update existing Terraform configuration"
            else
              COMMIT_MSG="Generate new Terraform configuration for ${{ github.event.inputs.domain_name }}"
            fi
            
            # コミットとプッシュ
            git commit -m "$COMMIT_MSG"
            git push
            echo "Changes committed and pushed"
          fi

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [commit-changes]
    if: always() && github.event_name == 'workflow_dispatch'
    steps:
      - name: Notify configuration completion
        run: |
          echo "Configuration management completed"
          echo "Domain: ${{ github.event.inputs.domain_name }}"
          echo "Snapshot Date: ${{ github.event.inputs.snapshot_date }}"
          echo "SSH Allowed IP: ${{ github.event.inputs.ssh_allowed_ip }}"
          echo "Validation Enabled: ${{ github.event.inputs.validation_enabled }}"
          echo "Registrant: ${{ github.event.inputs.registrant_name }}"
          echo "Email: ${{ github.event.inputs.registrant_email }}"
          echo "Phone: ${{ github.event.inputs.registrant_phone }}"
          echo "Register Domain: ${{ github.event.inputs.register_domain }}"
          echo "Update Only: ${{ github.event.inputs.update_only }}"
          
          if [ "${{ needs.commit-changes.result }}" = "success" ]; then
            echo "✅ Configuration files updated successfully"
          else
            echo "⚠️ Configuration files updated but commit failed"
          fi 