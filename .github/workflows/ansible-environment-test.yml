name: Ansible Environment Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ansible/**'
      - 'deployment_config.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ansible/**'
      - 'deployment_config.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development
          - validation
      auto_approve:
        description: 'Auto approve all prompts'
        required: false
        default: false
        type: boolean

env:
  ANSIBLE_HOST_KEY_CHECKING: false
  ANSIBLE_FORCE_COLOR: true
  ANSIBLE_SSH_ARGS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

jobs:
  setup-ansible:
    name: Setup Ansible Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 pyyaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Generate inventory
        working-directory: ./ansible
        run: |
          echo "Generating inventory..."
          python3 generate_inventory.py
          
          if [ -f "inventory/hosts.yml" ]; then
              echo "✓ Inventory generated successfully"
          else
              echo "::error::Failed to generate inventory"
              exit 1
          fi

  test-environment:
    name: Test Environment
    runs-on: ubuntu-latest
    needs: setup-ansible
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 pyyaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy inventory and config
        run: |
          cp -r ansible/inventory ./
          cp -r ansible/group_vars ./

      - name: Test server connection
        working-directory: ./ansible
        run: |
          echo "Testing server connection..."
          
          # リトライループで接続テスト
          for i in {1..10}; do
              if ansible wordpress -i inventory/hosts.yml -m ping; then
                  echo "✓ WordPress server connection successful"
                  break
              else
                  echo "Attempt $i: Connection failed, retrying..."
                  sleep 30
              fi
          done
          
          if [ $i -eq 10 ]; then
              echo "::error::WordPress server connection failed after 10 attempts"
              exit 1
          fi

      - name: Test system information
        working-directory: ./ansible
        run: |
          echo "Testing system information..."
          ansible wordpress -i inventory/hosts.yml -m setup -a "filter=ansible_distribution*"
          echo "✓ System information test completed"

      - name: Test service status
        working-directory: ./ansible
        run: |
          echo "Testing service status..."
          ansible wordpress -i inventory/hosts.yml -m service_facts
          echo "✓ Service status test completed"

      - name: Test file existence
        working-directory: ./ansible
        run: |
          echo "Testing file existence..."
          ansible wordpress -i inventory/hosts.yml -m stat -a "path=/var/www/html/wp-config.php"
          ansible wordpress -i inventory/hosts.yml -m stat -a "path=/etc/httpd/conf/httpd.conf"
          ansible wordpress -i inventory/hosts.yml -m stat -a "path=/etc/php.ini"
          echo "✓ File existence test completed"

      - name: Test port connectivity
        working-directory: ./ansible
        run: |
          echo "Testing port connectivity..."
          ansible wordpress -i inventory/hosts.yml -m wait_for -a "port=80 timeout=10"
          ansible wordpress -i inventory/hosts.yml -m wait_for -a "port=22 timeout=10"
          echo "✓ Port connectivity test completed"

      - name: Test WordPress access
        working-directory: ./ansible
        run: |
          echo "Testing WordPress access..."
          
          # WordPress IPアドレスの取得
          WORDPRESS_IP=$(ansible wordpress -i inventory/hosts.yml -m setup -a "filter=ansible_default_ipv4" | grep "address" | head -1 | awk '{print $2}' | tr -d '"')
          
          if [ -n "$WORDPRESS_IP" ]; then
              echo "WordPress IP: $WORDPRESS_IP"
              
              # リトライループでWordPressアクセステスト
              for i in {1..15}; do
                  if curl -f -s "http://$WORDPRESS_IP" > /dev/null; then
                      echo "✓ WordPress site is accessible"
                      break
                  else
                      echo "Attempt $i: WordPress site not ready yet, waiting..."
                      sleep 10
                  fi
              done
              
              if [ $i -eq 15 ]; then
                  echo "::error::WordPress site is not accessible after 15 attempts"
                  exit 1
              fi
          else
              echo "::error::Could not get WordPress IP address"
              exit 1
          fi

      - name: Test database connection
        working-directory: ./ansible
        run: |
          echo "Testing database connection..."
          ansible wordpress -i inventory/hosts.yml -m mysql_query -a "
              login_host={{ rds_host }}
              login_user={{ wp_db_user }}
              login_password={{ wp_db_password }}
              query='SELECT 1'
          " --extra-vars "@group_vars/wordpress.yml"
          echo "✓ Database connection test completed"

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: test-environment
    if: always()
    steps:
      - name: Notify success
        if: needs.test-environment.result == 'success'
        run: |
          echo "✅ Ansible environment test completed successfully"
          echo "Environment is working properly"
          # TODO: Add Slack notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Ansible environment test completed successfully"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.test-environment.result == 'failure'
        run: |
          echo "❌ Ansible environment test failed"
          echo "Please check the logs and take appropriate action"
          # TODO: Add Slack notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ Ansible environment test failed"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
