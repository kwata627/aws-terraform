name: Update SSH CIDR

on:
  workflow_dispatch:
    inputs:
      ip_address:
        description: 'IP address to allow SSH access'
        required: true
        type: string
      cidr_range:
        description: 'CIDR range to allow SSH access (e.g., 192.168.1.0/24)'
        required: false
        type: string
      auto_detect_ip:
        description: 'Auto-detect current IP address'
        required: false
        default: true
        type: boolean
      update_terraform:
        description: 'Update terraform.tfvars file'
        required: false
        default: true
        type: boolean
      update_security_groups:
        description: 'Update AWS security groups directly'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 9 * * 1'  # 毎週月曜日9時（定期更新）

env:
  AWS_REGION: ap-northeast-1

jobs:
  update-ssh-cidr:
    runs-on: ubuntu-latest
    name: Update SSH CIDR
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 pyyaml
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Determine IP address
      id: ip_detection
      run: |
        if [ "${{ github.event.inputs.auto_detect_ip }}" = "true" ] && [ -z "${{ github.event.inputs.ip_address }}" ] && [ -z "${{ github.event.inputs.cidr_range }}" ]; then
          # Auto-detect current IP
          CURRENT_IP=$(curl -s https://ipinfo.io/ip)
          echo "detected_ip=$CURRENT_IP" >> $GITHUB_OUTPUT
          echo "✅ Auto-detected IP: $CURRENT_IP"
        elif [ -n "${{ github.event.inputs.ip_address }}" ]; then
          # Use provided IP address
          echo "detected_ip=${{ github.event.inputs.ip_address }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided IP: ${{ github.event.inputs.ip_address }}"
        elif [ -n "${{ github.event.inputs.cidr_range }}" ]; then
          # Use provided CIDR range
          echo "detected_ip=${{ github.event.inputs.cidr_range }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided CIDR: ${{ github.event.inputs.cidr_range }}"
        else
          echo "❌ No IP address or CIDR range provided"
          exit 1
        fi
        
    - name: Validate IP address
      run: |
        IP_TO_VALIDATE="${{ steps.ip_detection.outputs.detected_ip }}"
        
        # Check if it's a CIDR range
        if [[ "$IP_TO_VALIDATE" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
          echo "✅ Valid CIDR range: $IP_TO_VALIDATE"
        # Check if it's a single IP
        elif [[ "$IP_TO_VALIDATE" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          # Validate IP octets
          IFS='.' read -ra OCTETS <<< "$IP_TO_VALIDATE"
          for octet in "${OCTETS[@]}"; do
            if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
              echo "❌ Invalid IP address: $IP_TO_VALIDATE"
              exit 1
            fi
          done
          echo "✅ Valid IP address: $IP_TO_VALIDATE"
        else
          echo "❌ Invalid IP address or CIDR format: $IP_TO_VALIDATE"
          exit 1
        fi
        
    - name: Update terraform.tfvars
      if: ${{ github.event.inputs.update_terraform == 'true' }}
      run: |
        if [ -f "terraform.tfvars" ]; then
          # Backup current file
          cp terraform.tfvars terraform.tfvars.backup
          
          # Update ssh_allowed_cidr in terraform.tfvars
          if [[ "${{ steps.ip_detection.outputs.detected_ip }}" =~ /[0-9]{1,2}$ ]]; then
            # It's already a CIDR range
            NEW_CIDR="${{ steps.ip_detection.outputs.detected_ip }}"
          else
            # Convert IP to CIDR
            NEW_CIDR="${{ steps.ip_detection.outputs.detected_ip }}/32"
          fi
          
          # Update the file
          sed -i "s/ssh_allowed_cidr = \".*\"/ssh_allowed_cidr = \"$NEW_CIDR\"/" terraform.tfvars
          
          echo "✅ Updated terraform.tfvars with CIDR: $NEW_CIDR"
        else
          echo "⚠️ terraform.tfvars not found, skipping update"
        fi
        
    - name: Update AWS security groups
      if: ${{ github.event.inputs.update_security_groups == 'true' }}
      run: |
        # Get security group IDs from Terraform state
        if [ -f "terraform/terraform.tfstate" ]; then
          cd terraform
          
          # Get WordPress security group ID
          WORDPRESS_SG_ID=$(terraform output -raw wordpress_security_group_id 2>/dev/null || echo "")
          
          if [ -n "$WORDPRESS_SG_ID" ]; then
            # Determine CIDR range
            if [[ "${{ steps.ip_detection.outputs.detected_ip }}" =~ /[0-9]{1,2}$ ]]; then
              NEW_CIDR="${{ steps.ip_detection.outputs.detected_ip }}"
            else
              NEW_CIDR="${{ steps.ip_detection.outputs.detected_ip }}/32"
            fi
            
            # Update security group rule
            aws ec2 revoke-security-group-ingress \
              --group-id "$WORDPRESS_SG_ID" \
              --protocol tcp \
              --port 22 \
              --cidr 0.0.0.0/0 2>/dev/null || true
            
            aws ec2 authorize-security-group-ingress \
              --group-id "$WORDPRESS_SG_ID" \
              --protocol tcp \
              --port 22 \
              --cidr "$NEW_CIDR"
            
            echo "✅ Updated security group $WORDPRESS_SG_ID with CIDR: $NEW_CIDR"
          else
            echo "⚠️ WordPress security group ID not found"
          fi
        else
          echo "⚠️ Terraform state not found, skipping security group update"
        fi
        
    - name: Apply Terraform changes
      if: ${{ github.event.inputs.update_terraform == 'true' }}
      working-directory: ./terraform
      run: |
        # Plan the changes
        terraform plan -var-file="../terraform.tfvars" -out=tfplan
        
        # Apply the changes
        terraform apply tfplan
        
        echo "✅ Terraform changes applied"
        
    - name: Test SSH access
      run: |
        # Get WordPress server IP
        WORDPRESS_IP=$(cd terraform && terraform output -raw wordpress_public_ip 2>/dev/null || echo "")
        
        if [ -n "$WORDPRESS_IP" ]; then
          # Test SSH connection (timeout after 10 seconds)
          if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@"$WORDPRESS_IP" "echo 'SSH connection successful'" 2>/dev/null; then
            echo "✅ SSH connection test successful"
          else
            echo "⚠️ SSH connection test failed (this may be normal if the IP is not yet updated)"
          fi
        else
          echo "⚠️ WordPress IP not found, skipping SSH test"
        fi
        
    - name: Create update summary
      run: |
        echo "## SSH CIDR Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- New IP/CIDR: ${{ steps.ip_detection.outputs.detected_ip }}"
        echo "- Update Type: ${{ github.event.inputs.auto_detect_ip == 'true' && 'Auto-detected' || 'Manual' }}"
        echo "- Terraform Updated: ${{ github.event.inputs.update_terraform == 'true' && 'Yes' || 'No' }}"
        echo "- Security Groups Updated: ${{ github.event.inputs.update_security_groups == 'true' && 'Yes' || 'No' }}"
        echo "- Status: ✅ Update completed successfully"
        echo ""
        echo "### Next Steps"
        echo "1. Verify SSH access from the new IP/CIDR"
        echo "2. Test deployment workflows"
        echo "3. Monitor security group logs"
        
    - name: Upload updated files
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.update_terraform == 'true' }}
      with:
        name: updated-config
        path: |
          terraform.tfvars
          terraform.tfvars.backup
        retention-days: 30 