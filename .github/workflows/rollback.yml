name: Rollback Production Environment

on:
  push:
    branches: [ main ]
    paths:
      - 'scripts/maintenance/rollback.sh'
      - 'deployment_config.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/maintenance/rollback.sh'
      - 'deployment_config.json'
  workflow_dispatch:
    inputs:
      snapshot_id:
        description: 'Specific snapshot ID to rollback to (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      auto_approve:
        description: 'Auto approve all prompts'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-northeast-1
  CONFIG_FILE: deployment_config.json

jobs:
  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Validate deployment config
        run: |
          python3 -c "
          import json
          import sys
          
          try:
              with open('${{ env.CONFIG_FILE }}', 'r') as f:
                  config = json.load(f)
              
              required_fields = [
                  'production.ec2_instance_id',
                  'production.rds_identifier',
                  'production.wordpress_url'
              ]
              
              for field in required_fields:
                  keys = field.split('.')
                  value = config
                  for key in keys:
                      if key not in value:
                          print(f'Missing required field: {field}')
                          sys.exit(1)
                      value = value[key]
                  
                  if value is None or value == '':
                      print(f'Empty value for required field: {field}')
                      sys.exit(1)
              
              print('Configuration validation passed')
              
          except FileNotFoundError:
              print(f'Configuration file not found: ${{ env.CONFIG_FILE }}')
              sys.exit(1)
          except json.JSONDecodeError as e:
              print(f'Invalid JSON in configuration file: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'Error validating configuration: {e}')
              sys.exit(1)
          "

  check-snapshots:
    name: Check Available Snapshots
    runs-on: ubuntu-latest
    needs: validate-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load configuration
        id: config
        run: |
          PROD_RDS_ID=$(jq -r '.production.rds_identifier' "${{ env.CONFIG_FILE }}")
          echo "prod_rds_id=$PROD_RDS_ID" >> $GITHUB_OUTPUT

      - name: List available snapshots
        id: snapshots
        run: |
          echo "Checking available snapshots..."
          
          # 利用可能なスナップショットをリスト表示
          aws rds describe-db-snapshots \
              --db-instance-identifier "${{ steps.config.outputs.prod_rds_id }}" \
              --query 'DBSnapshots[?SnapshotType==`manual`] | sort_by(@, &SnapshotCreateTime) | reverse(@) | [0:5] | [].{Identifier:DBSnapshotIdentifier,CreateTime:SnapshotCreateTime,Status:Status}' \
              --output table
          
          # 最新のスナップショットIDを取得
          LATEST_SNAPSHOT=$(aws rds describe-db-snapshots \
              --db-instance-identifier "${{ steps.config.outputs.prod_rds_id }}" \
              --query 'DBSnapshots[?SnapshotType==`manual`] | sort_by(@, &SnapshotCreateTime) | [-1].DBSnapshotIdentifier' \
              --output text)
          
          if [ "$LATEST_SNAPSHOT" = "None" ] || [ "$LATEST_SNAPSHOT" = "" ]; then
              echo "::error::No available snapshots found"
              exit 1
          fi
          
          echo "latest_snapshot=$LATEST_SNAPSHOT" >> $GITHUB_OUTPUT
          echo "✓ Latest snapshot: $LATEST_SNAPSHOT"

  rollback-production:
    name: Rollback Production Environment
    runs-on: ubuntu-latest
    needs: [validate-config, check-snapshots]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load configuration
        id: config
        run: |
          PROD_EC2_ID=$(jq -r '.production.ec2_instance_id' "${{ env.CONFIG_FILE }}")
          PROD_RDS_ID=$(jq -r '.production.rds_identifier' "${{ env.CONFIG_FILE }}")
          PROD_WP_URL=$(jq -r '.production.wordpress_url' "${{ env.CONFIG_FILE }}")
          
          echo "prod_ec2_id=$PROD_EC2_ID" >> $GITHUB_OUTPUT
          echo "prod_rds_id=$PROD_RDS_ID" >> $GITHUB_OUTPUT
          echo "prod_wp_url=$PROD_WP_URL" >> $GITHUB_OUTPUT

      - name: Manual approval for rollback
        if: github.event.inputs.auto_approve != 'true'
        run: |
          echo "⚠️  PRODUCTION ROLLBACK REQUIRES MANUAL APPROVAL ⚠️"
          echo ""
          echo "This will rollback the production environment to a previous state."
          echo "Please approve this rollback in the GitHub Actions interface."
          echo ""
          echo "Production URL: ${{ steps.config.outputs.prod_wp_url }}"
          echo "Snapshot ID: ${{ needs.check-snapshots.outputs.snapshots.latest_snapshot }}"
          echo ""
          echo "Waiting for manual approval..."

      - name: Get snapshot ID
        id: snapshot
        run: |
          # 指定されたスナップショットIDまたは最新のスナップショットを使用
          if [ -n "${{ github.event.inputs.snapshot_id }}" ]; then
              SNAPSHOT_ID="${{ github.event.inputs.snapshot_id }}"
              echo "Using specified snapshot: $SNAPSHOT_ID"
          else
              SNAPSHOT_ID="${{ needs.check-snapshots.outputs.snapshots.latest_snapshot }}"
              echo "Using latest snapshot: $SNAPSHOT_ID"
          fi
          
          echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT

      - name: Stop production RDS
        run: |
          echo "Stopping production RDS instance..."
          aws rds stop-db-instance --db-instance-identifier "${{ steps.config.outputs.prod_rds_id }}"
          echo "✓ Production RDS stopped"

      - name: Restore from snapshot
        run: |
          echo "Restoring from snapshot: ${{ steps.snapshot.outputs.snapshot_id }}"
          
          aws rds restore-db-instance-from-db-snapshot \
              --db-instance-identifier "${{ steps.config.outputs.prod_rds_id }}" \
              --db-snapshot-identifier "${{ steps.snapshot.outputs.snapshot_id }}" \
              --db-instance-class db.t3.micro \
              --no-multi-az
          
          echo "✓ Database restoration started"

      - name: Wait for restoration to complete
        run: |
          echo "Waiting for restoration to complete..."
          aws rds wait db-instance-available --db-instance-identifier "${{ steps.config.outputs.prod_rds_id }}"
          echo "✓ Database restoration completed"

      - name: Restore WordPress files
        id: files
        run: |
          echo "Restoring WordPress files..."
          
          PROD_IP=$(aws ec2 describe-instances --instance-ids "${{ steps.config.outputs.prod_ec2_id }}" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          
          # SSH鍵の設定
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/rollback_key
          chmod 600 /tmp/rollback_key
          
          # 最新のバックアップファイルを探す
          BACKUP_FILE=$(ls -t wordpress_files_backup_*.tar.gz 2>/dev/null | head -1)
          
          if [ -n "$BACKUP_FILE" ]; then
              echo "Found backup file: $BACKUP_FILE"
              scp -o StrictHostKeyChecking=no -i /tmp/rollback_key "$BACKUP_FILE" ec2-user@"$PROD_IP":/tmp/
              ssh -o StrictHostKeyChecking=no -i /tmp/rollback_key ec2-user@"$PROD_IP" "sudo tar -xzf /tmp/$(basename "$BACKUP_FILE") -C /var/www/html/ && sudo chown -R apache:apache /var/www/html/"
              echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
              echo "✓ WordPress files restored from: $BACKUP_FILE"
          else
              echo "No WordPress backup file found"
              echo "backup_file=none" >> $GITHUB_OUTPUT
              echo "⚠️ WordPress files backup not found. Manual restoration may be required."
          fi

      - name: Wait for system stabilization
        run: |
          echo "Waiting for system stabilization..."
          sleep 30
          echo "✓ System stabilization wait completed"

      - name: Test production environment
        run: |
          echo "Testing production environment after rollback..."
          
          # サイトの動作確認
          for i in {1..15}; do
              if curl -f -s "${{ steps.config.outputs.prod_wp_url }}" > /dev/null; then
                  echo "✓ Production site is accessible after rollback"
                  break
              else
                  echo "Attempt $i: Production site not ready yet, waiting..."
                  sleep 10
              fi
          done
          
          if [ $i -eq 15 ]; then
              echo "::error::Production site is not accessible after rollback"
              exit 1
          fi

      - name: Display rollback summary
        run: |
          echo "=== Production Rollback Completed ==="
          echo "Production URL: ${{ steps.config.outputs.prod_wp_url }}"
          echo "Snapshot ID: ${{ steps.snapshot.outputs.snapshot_id }}"
          echo "WordPress Backup: ${{ steps.files.outputs.backup_file }}"
          echo ""
          echo "Rollback completed successfully!"
          echo "Production environment has been restored to a previous state."

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: rollback-production
    if: always()
    steps:
      - name: Notify success
        if: needs.rollback-production.result == 'success'
        run: |
          echo "✅ Production rollback completed successfully"
          echo "Production environment has been restored"
          # TODO: Add Slack notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ Production rollback completed successfully"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.rollback-production.result == 'failure'
        run: |
          echo "❌ Production rollback failed"
          echo "Please check the logs and take appropriate action"
          # TODO: Add Slack notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ Production rollback failed"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }} 